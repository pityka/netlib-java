/*
 * Copyright (C) 2013 Samuel Halliday
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/].
 */

group netlib-java;

import "netlib-common.stg"

implClass(package, name, members, docs, parent) ::= <<
$copyright()$
package $package$;

/**
 * $docs$
 */
public class $name$ extends $parent$ {
  $members; separator="\n\n"$
}
>>

params(paramTypes, paramNames) ::= <<
$paramTypes,paramNames:{t,p|$t$ $p$};separator=", "$
>>

f2jImplMethod(returns, method, impl, paramTypes, paramNames, calls, return="return") ::= <<
@Override
public $returns$ $method$($params(paramTypes,paramNames)$) {
  $return$ $impl$($calls; separator=", "$);
}
>>


abstractMethod(return, method, paramTypes, paramNames, docs = "", returnDocs = "@return") ::= <<
/**
 * $docs$
 *
$paramNames:{n|  * @param $n$};separator="\n"$
 * $returnDocs$
 */
abstract public $return$ $method$($params(paramTypes,paramNames)$);
>>

abstractClass(package, name, members, docs, fallback, impls, initCode = "") ::= <<
$copyright()$
package $package$;

/**
 * $docs$
 * <p>
 * Property {@value #PROPERTY_KEY} defines the implementation to load,
 * defaulting to {@value #FALLBACK}.
 * <p>
 * <i>This requires 1D column-major linearized arrays, as
 * expected by the lower level routines; contrary to
 * typical Java 2D row-major arrays.</i>
 */
public abstract class $name$ {

  private static final String FALLBACK = "$fallback$";
  private static final String IMPLS = "$impls$";
  private static final String PROPERTY_KEY = "$package$.$name$";
  private static final $name$ INSTANCE;
  public static final java.util.ArrayList<Throwable> exceptionsDuringLoad = new java.util.ArrayList<Throwable>() ;
  static {
    try {
      String[] classNames = System.getProperty(PROPERTY_KEY, IMPLS).split(",");
      $name$ impl = null;
      for (String className: classNames) {
        try {
          impl = load(className);
          break;
        } catch (Throwable e) {
          exceptionsDuringLoad.add(e);
        }
      }
      if (impl == null) {
        impl = load(FALLBACK);
      }
      INSTANCE = impl;
      $initCode$
    } catch (Throwable e) {
      throw new ExceptionInInitializerError(e);
    }
  }

  private static $name$ load(String className) throws Exception {
    Class klass = Class.forName(className);
    return ($name$) klass.getDeclaredConstructor().newInstance();
  }

  /**
   * @return the environment-defined implementation.
   */
  public static $name$ getInstance() {
    return INSTANCE;
  }

  $members; separator="\n\n"$
}
>>

nativeImplMethod(returns, method, paramTypes, paramNames) ::= <<
@Override
public native $returns$ $method$($params(paramTypes,paramNames)$);
>>

nativeImplMethod_offsets(returns, method, paramTypes, paramNames, return="return ") ::= <<
@Override
public $returns$ $method$($params(paramTypes,paramNames)$) {
  $return$$method$_offsets($paramNames; separator=", "$);
}

public native $returns$ $method$_offsets($params(paramTypes,paramNames)$);
>>


unsupportedMethod(returns, method, paramTypes, paramNames) ::= <<
@Override
public $returns$ $method$($params(paramTypes,paramNames)$) {
  throw new UnsupportedOperationException();
}
>>

staticJniLoader(prop, lib) ::= <<
static {
  String jnilib;
  String os = System.getProperty("os.name", "").toLowerCase();
  String arch = System.getProperty("os.arch", "").toLowerCase();
  if (os.startsWith("linux")) {
      if (arch == "aarch64" || arch == "arm64") {
        jnilib = "libnetlibjavajni.aarch64.so";
      } else {
        jnilib = "libnetlibjavajni.x86_64.so";
      }
  } else if (os.startsWith("mac os x") || os.startsWith("darwin")) {
      jnilib = "libnetlibjavajni.dylib";
  } else {
    throw new RuntimeException("Operating system not supported or not recognized: "+os);
  }
  String natives = System.getProperty("$prop$", jnilib);
  com.github.fommil.jni.JniLoader.load(natives.split(","));
}
>>